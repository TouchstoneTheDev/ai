*******Time Complexity = O (b^d)************
*******Space Complexity = O (b^d)************
*************COPY THE CODE CAUTIOUSLY. DO NOT COPY THE COMMENTS. COMMENTS GET SHIFTED ACCORDING TO TAB SIZE****************************
#BFS
#It has a constructor method __init__ that initializes an empty dictionary graph as an instance variable.

class Graph:
    def __init__(self):
        self.graph = {}

#The method enters a loop that continues as long as the queue is not empty.

    def bfs(self, start_node):
        visited = set()
        queue = []

        queue.append(start_node)

        while queue:
            node = queue.pop(0)
            if node not in visited:
                print(node, end=" ")
                visited.add(node)
                neighbors = self.graph.get(node, [])
                queue.extend(neighbors)

#This method add_edge allows adding an edge between two nodes in the graph.

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []

        if v not in self.graph:
            self.graph[v] = []

        self.graph[u].append(v)
        self.graph[v].append(u)

#This creates an instance of the Graph class and assigns it to the variable graph.

graph = Graph()

#This prompts the user to enter the number of nodes in the graph and reads the input as an integer, storing it in the variable num_nodes.

num_nodes = int(input("Enter the number of nodes: "))

#For each node, it prompts the user to enter the node value (node) and whether the node has any children (has_children).

for i in range(num_nodes):
    node = input(f"Enter node {i+1}: ")
    has_children = input(f"Does node {node} have any children? (y/n): ")

    if has_children.lower() == 'y':
        children = []
        while True:
            print(f"Menu for {node}:")
            print("1. Add child")
            print("2. Finish adding children")

            choice = int(input("Enter your choice: "))
            if choice == 1:
                child = input(f"Enter child for node {node}: ")
                children.append(child)
            elif choice == 2:
                break
            else:
                print("Invalid choice! Try again.")

        graph.graph[node] = children

#This prompts the user to enter the starting node for the BFS traversal and reads the input as a string, storing it in the variable start_node.
#It then prints the string "BFS Traversal:" as a prompt.

start_node = input("Enter the start node: ")
print("BFS Traversal:")
graph.bfs(start_node)

Theory:

GRAPH TRAVERSALS
Graph traversal means visiting every vertex and edge exactly once in a well-defined order. While using
certain graph algorithms, you must ensure that each vertex of the graph is visited exactly once. The
order in which the vertices are visited are important and may depend upon the algorithm or question
that you are solving.

Breadth-first search (BFS) is an algorithm used for tree traversal on graphs or tree data structures.
BFS can be easily implemented using recursion and data structures like dictionaries and lists.
BFS Algorithm:
1. Pick any node, visit the adjacent unvisited vertex, mark it as visited, display it, and insert it in a
queue.
2. If there are no remaining adjacent vertices left, remove the first vertex from the queue.
3. Repeat step 1 and step 2 until the queue is empty or the desired node is found.

BFS Algorithm Complexity
The time complexity of the BFS algorithm is represented in the form of O(V + E), where V is
the number of nodes and E is the number of edges.The space complexity of the algorithm is O(V).

BFS Algorithm Applications
1. To build index by search index
2. For GPS navigation
3. Path finding algorithms




----------------------------------------------------------------------------------------------------------
Input -

Enter your choice: 1
Enter child for node A: B
Menu for A:
1. Add child
2. Finish adding children
Enter your choice: 2
Enter node 2: C
Does node C have any children? (y/n): y
Menu for C:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node C: A
Menu for C:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node C: D
Menu for C:
1. Add child
2. Finish adding children
Enter your choice: 2
Enter node 3: D
Does node D have any children? (y/n): y
Menu for D:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node D: C
Menu for D:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node D: A
Menu for D:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node D: B
Menu for D:
1. Add child
2. Finish adding children
Enter your choice: 2
Enter node 4: B
Does node B have any children? (y/n): y
Menu for B:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node B: A
Menu for B:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node B: D
Menu for B:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node B: E
Menu for B:
1. Add child
2. Finish adding children
Enter your choice: 2
Enter node 5: E
Does node E have any children? (y/n): y
Menu for E:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node E: B
Menu for E:
1. Add child
2. Finish adding children
Enter your choice: 1
Enter child for node E: D
Menu for E:
1. Add child
2. Finish adding children
Enter your choice: 2
Enter the start node: A
BFS Traversal:
A C D B E 
Process finished with exit code 0
