*************COPY THE CODE CAUTIOUSLY. DO NOT COPY THE COMMENTS. COMMENTS GET SHIFTED ACCORDING TO TAB SIZE****************************

EXPERIMENT NO. 6
Aim: Implement any one of the following Expert System
I. Information management
II. Hospitals and medical facilities
III. Help desks management
IV. Employee performance evaluation
V. Stock market trading
VI. Airline scheduling and cargo schedules

Objective:
â€¢ To study and implement expert system using Prolog.

####*** Note = Command for run code on terminal ***#####
####*** swipl -s new.pl       new.pl is file name***#####
#############################################Code:###################################################

#The code starts with the go/0 predicate, which serves as the entry point of the expert system.

#When go/0 is called, it tries to find a matching disease by calling the 'hypothesis/1' predicate with the variable 'Disease'.

#If a matching disease is found, it prints the suggestion for that disease and executes the 'undo/0' predicate. If no matching disease is found, it prints a #message indicating that the system is unable to identify the disease and also executes the 'undo/0' predicate.


go :-
    hypothesis(Disease),
    write('It is suggested that the patient has '),
    write(Disease),
    nl,
    undo.

go :-
    write('Sorry, the system is unable to identify the disease'),
    nl,
    undo.

#The hypothesis/1 predicates represent different diseases and their associated symptoms.
#Each predicate checks if the given symptoms match the symptoms associated with a specific disease. For example, the hypothesis(cold)/0 predicate checks if #the symptoms include headache, runny nose, sneezing, and sore throat.

#If a disease predicate matches, it prints the advice and suggestions for that disease. For example, the 'hypothesis(cold)/0' predicate prints advice such #as taking Tylenol, Panadol, and nasal spray, and wearing warm clothes.

hypothesis(cold) :-
    symptom(headache),
    symptom(runny_nose),
    symptom(sneezing),
    symptom(sore_throat),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Tylenol'),
    nl,
    write('2: Panadol'),
    nl,
    write('3: Nasal spray'),
    nl,
    write('Please wear warm clothes because'),
    nl,
    !.

hypothesis(influenza) :-
    symptom(sore_throat),
    symptom(fever),
    symptom(headache),
    symptom(chills),
    symptom(body_ache),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Tamiflu'),
    nl,
    write('2: Panadol'),
    nl,
    write('3: Zanamivir'),
    nl,
    write('Please take a warm bath and do salt gargling because'),
    nl,
    !.

hypothesis(typhoid) :-
    symptom(headache),
    symptom(abdominal_pain),
    symptom(poor_appetite),
    symptom(fever),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Chloramphenicol'),
    nl,
    write('2: Amoxicillin'),
    nl,
    write('3: Ciprofloxacin'),
    nl,
    write('4: Azithromycin'),
    nl,
    write('Please do complete bed rest and take a soft diet because'),
    nl,
    !.

hypothesis(chicken_pox) :-
    symptom(rash),
    symptom(body_ache),
    symptom(fever),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Varicella vaccine'),
    nl,
    write('2: Immunoglobulin'),
    nl,
    write('3: Acetaminophen'),
    nl,
    write('4: Acyclovir'),
    nl,
    write('Please have an oatmeal bath and stay at home because'),
    nl.

hypothesis(measles) :-
    symptom(fever),
    symptom(runny_nose),
    symptom(rash),
    symptom(conjunctivitis),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Tylenol'),
    nl,
    write('2: Aleve'),
    nl,
    write('3: Advil'),
    nl,
    write('4: Vitamin A'),
    nl,
    write('Please get rest and drink plenty of liquids because'),
    nl,
    !.

hypothesis(malaria) :-
    symptom(fever),
    symptom(sweating),
    symptom(headache),
    symptom(nausea),
    symptom(vomiting),
    symptom(diarrhea),
    nl,
    write('Advices and Suggestions:'),
    nl,
    write('1: Aralen'),
    nl,
    write('2: Qualaquin'),
    nl,
    write('3: Plaquenil'),
    nl,
    write('4: Mefloquine'),
    nl,
    write('Please do not sleep in open air and cover your full skin because'),
    nl,
    !.

#The 'ask/1' predicate is used to query the user about the presence of specific symptoms.
#It prints a question asking if the patient has a particular symptom and reads the response from the user. If the response is "yes" or "y", it asserts that #the symptom is present ('assert(yes(Question))') 

#If the response is anything else, it asserts that the symptom is not present ('assert(no(Question))').

ask(Question) :-
    write('Does the patient have the symptom '),
    write(Question),
    write('? (yes/no): '),
    read(Response),
    nl,
    ((Response == yes ; Response == y) ->
        assert(yes(Question));
        assert(no(Question)),
        fail).

#The :- dynamic yes/1, no/1 directive declares yes/1 and no/1 as dynamic predicates, allowing them to be modified during runtime.

:- dynamic yes/1, no/1.

#The 'symptom/1' predicate checks if a symptom is present by first checking if it has been previously confirmed (yes(S)), and if not, checking if it has #been previously denied (no(S)). If neither is true, it calls the ask/1 predicate to get a response from the user.

symptom(S) :-
    (yes(S) ->
        true;
        (no(S) ->
            fail;
            ask(S))).

#The undo/0 predicate is used to backtrack and retract the previously asserted symptoms, allowing the user to try different symptoms or restart the #diagnosis process.

undo :-
    retract(yes(_)),
    fail.

#Finally, the undo/0 predicate at the end of the code is a catch-all clause that ensures the expert system can be reset by retracting any remaining asserted #symptoms.

undo :-
    retract(no(_)),
    fail.

undo.

#####################################################Theory:##############################################
An expert system is a computer program that is designed to solve complex
problems and to provide decision-making ability like a human expert. It performs
this by extracting knowledge from its knowledge base using the reasoning and
inference rules according to the userqueries.
The system helps in decision making for compsex problems using both facts
and heuristics like a human expert. It is called so because it contains the expert
knowledge of a specific domain and can solve any complex problem of that
particular domain. These systems are designed for a specific domain, such as
medicine, science, etc.
Eg:DENDRAL, MYCIN, PXDES, CaDeT

